generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model foodentry {
  id          Int      @id @default(autoincrement())
  userId      String
  name        String
  calories    Int
  protein     Float
  carbs       Float
  fat         Float
  createdAt   DateTime    @default(now())
  userprofile userprofile @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model userprofile {
  id            String      @id @default(uuid())
  userId        String      @unique
  firstName     String
  lastName      String
  age           Int?
  weight        Float?
  height        Float?
  fitnessGoal   String?
  activityLevel String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  foodentry     foodentry[]
  waterlog      waterlog[]
  workoutprogram workoutprogram[]
  workoutlog workoutlog[]
  posts         post[]
  likes         like[]
  comments      comment[]
  followers     follow[]    @relation("Following")
  following     follow[]    @relation("Follower")

  @@index([userId])
}

model waterlog {
  id          Int      @id @default(autoincrement())
  userId      String
  amount      Int
  createdAt   DateTime    @default(now())
  userprofile userprofile @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model experiences {
  id           Int    @id @default(autoincrement())
  positionName String @db.VarChar(256)
  employeeName String @db.VarChar(256)
  dateStarted  String @db.VarChar(15)
  dateEnded    String @db.VarChar(15)
  description1 String @db.VarChar(256)
  description2 String @db.VarChar(256)
  description3 String @db.VarChar(256)
  imageUrl     String @db.VarChar(256)
}

model projects {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(256)
  description String @db.VarChar(256)
  image       String @db.VarChar(256)
  html_link   String @db.VarChar(256)
  github_link String @db.VarChar(256)
}

model workoutlog {
  id              String         @id @default(uuid())
  userId          String
  exercise        String
  sets            Int
  reps            Int
  weight          Float?
  muscleGroup     String?        // Optional field
  notes           String?        // Optional field
  createdAt       DateTime       @default(now())
  userprofile     userprofile    @relation(fields: [userId], references: [userId])
  post            post[]
  workoutprogram  workoutprogram[]

  @@index([userId])
}

model workoutprogram {
  id          String        @id @default(uuid())
  userId      String
  name        String
  description String?
  exercises   programexercise[] // New relation
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workoutlogs workoutlog[]
  userprofile userprofile   @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model programexercise {
  id              String        @id @default(uuid())
  workoutProgramId String
  exerciseName    String
  sets            Int
  reps            Int
  notes           String?
  order           Int          // For ordering exercises in the program
  muscleGroup     String?
  workoutProgram  workoutprogram @relation(fields: [workoutProgramId], references: [id], onDelete: Cascade)

  @@index([workoutProgramId])
}

model post {
  id          String     @id @default(uuid())
  userId      String
  content     String     @db.Text
  workoutLogId String?   // Optional reference to a workout log
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userprofile userprofile @relation(fields: [userId], references: [userId])
  workoutlog  workoutlog? @relation(fields: [workoutLogId], references: [id])
  likes       like[]
  comments    comment[]

  @@index([userId])
  @@index([workoutLogId])
}

model like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userprofile userprofile @relation(fields: [userId], references: [userId])

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
}

model comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userprofile userprofile @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([postId])
}

model follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    userprofile @relation("Follower", fields: [followerId], references: [userId])
  following   userprofile @relation("Following", fields: [followingId], references: [userId])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}